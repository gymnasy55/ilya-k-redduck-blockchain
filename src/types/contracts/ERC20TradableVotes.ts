/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ERC20TradableVotesInterface extends utils.Interface {
  functions: {
    "acceptPower()": FunctionFragment;
    "addLiquidity(uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buy()": FunctionFragment;
    "capitalShareRate()": FunctionFragment;
    "decimals()": FunctionFragment;
    "divider()": FunctionFragment;
    "endVoting()": FunctionFragment;
    "isWhale(address)": FunctionFragment;
    "lastVotingNumber()": FunctionFragment;
    "liquidity()": FunctionFragment;
    "name()": FunctionFragment;
    "price()": FunctionFragment;
    "rejectPower()": FunctionFragment;
    "release(address)": FunctionFragment;
    "sell(uint256)": FunctionFragment;
    "startVoting(uint256,uint64)": FunctionFragment;
    "suggestedPrice()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "vote(bool)": FunctionFragment;
    "votingDuration()": FunctionFragment;
    "votingStartedTime()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptPower"
      | "addLiquidity"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "buy"
      | "capitalShareRate"
      | "decimals"
      | "divider"
      | "endVoting"
      | "isWhale"
      | "lastVotingNumber"
      | "liquidity"
      | "name"
      | "price"
      | "rejectPower"
      | "release"
      | "sell"
      | "startVoting"
      | "suggestedPrice"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "vote"
      | "votingDuration"
      | "votingStartedTime"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptPower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "buy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "capitalShareRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "divider", values?: undefined): string;
  encodeFunctionData(functionFragment: "endVoting", values?: undefined): string;
  encodeFunctionData(functionFragment: "isWhale", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastVotingNumber",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "liquidity", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rejectPower",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "release", values: [string]): string;
  encodeFunctionData(functionFragment: "sell", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "suggestedPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "votingDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votingStartedTime",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "capitalShareRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "divider", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endVoting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isWhale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastVotingNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rejectPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "suggestedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingStartedTime",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Buy(address,uint256,uint256)": EventFragment;
    "LiquidityChanged(address,uint256,uint256)": EventFragment;
    "Sell(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Vote(address,bool,uint256)": EventFragment;
    "VotingEnd(address,uint256,uint256,uint256,uint256)": EventFragment;
    "VotingStart(address,uint256,uint64,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Vote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingEnd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingStart"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BuyEventObject {
  account: string;
  tokenAmount: BigNumber;
  amount: BigNumber;
}
export type BuyEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BuyEventObject
>;

export type BuyEventFilter = TypedEventFilter<BuyEvent>;

export interface LiquidityChangedEventObject {
  account: string;
  tokenAmount: BigNumber;
  amount: BigNumber;
}
export type LiquidityChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LiquidityChangedEventObject
>;

export type LiquidityChangedEventFilter =
  TypedEventFilter<LiquidityChangedEvent>;

export interface SellEventObject {
  account: string;
  amount: BigNumber;
  tokenAmount: BigNumber;
}
export type SellEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SellEventObject
>;

export type SellEventFilter = TypedEventFilter<SellEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface VoteEventObject {
  account: string;
  decision: boolean;
  power: BigNumber;
}
export type VoteEvent = TypedEvent<
  [string, boolean, BigNumber],
  VoteEventObject
>;

export type VoteEventFilter = TypedEventFilter<VoteEvent>;

export interface VotingEndEventObject {
  account: string;
  previousPrice: BigNumber;
  price: BigNumber;
  acceptPower: BigNumber;
  declinePower: BigNumber;
}
export type VotingEndEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  VotingEndEventObject
>;

export type VotingEndEventFilter = TypedEventFilter<VotingEndEvent>;

export interface VotingStartEventObject {
  account: string;
  suggestedPrice: BigNumber;
  duration: BigNumber;
  votingNumber: BigNumber;
}
export type VotingStartEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  VotingStartEventObject
>;

export type VotingStartEventFilter = TypedEventFilter<VotingStartEvent>;

export interface ERC20TradableVotes extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC20TradableVotesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptPower(overrides?: CallOverrides): Promise<[BigNumber]>;

    addLiquidity(
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buy(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    capitalShareRate(overrides?: CallOverrides): Promise<[number]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    divider(overrides?: CallOverrides): Promise<[BigNumber]>;

    endVoting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isWhale(whale: string, overrides?: CallOverrides): Promise<[boolean]>;

    lastVotingNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidity(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; tokenAmount: BigNumber }
    >;

    name(overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    rejectPower(overrides?: CallOverrides): Promise<[BigNumber]>;

    release(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sell(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startVoting(
      suggestedPrice_: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    suggestedPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      decision: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votingDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    votingStartedTime(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  acceptPower(overrides?: CallOverrides): Promise<BigNumber>;

  addLiquidity(
    tokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  buy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  capitalShareRate(overrides?: CallOverrides): Promise<number>;

  decimals(overrides?: CallOverrides): Promise<number>;

  divider(overrides?: CallOverrides): Promise<BigNumber>;

  endVoting(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isWhale(whale: string, overrides?: CallOverrides): Promise<boolean>;

  lastVotingNumber(overrides?: CallOverrides): Promise<BigNumber>;

  liquidity(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; tokenAmount: BigNumber }
  >;

  name(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  rejectPower(overrides?: CallOverrides): Promise<BigNumber>;

  release(
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sell(
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startVoting(
    suggestedPrice_: BigNumberish,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  suggestedPrice(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    decision: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votingDuration(overrides?: CallOverrides): Promise<BigNumber>;

  votingStartedTime(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    acceptPower(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buy(overrides?: CallOverrides): Promise<boolean>;

    capitalShareRate(overrides?: CallOverrides): Promise<number>;

    decimals(overrides?: CallOverrides): Promise<number>;

    divider(overrides?: CallOverrides): Promise<BigNumber>;

    endVoting(overrides?: CallOverrides): Promise<boolean>;

    isWhale(whale: string, overrides?: CallOverrides): Promise<boolean>;

    lastVotingNumber(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; tokenAmount: BigNumber }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    rejectPower(overrides?: CallOverrides): Promise<BigNumber>;

    release(recipient: string, overrides?: CallOverrides): Promise<boolean>;

    sell(
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    startVoting(
      suggestedPrice_: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    suggestedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vote(decision: boolean, overrides?: CallOverrides): Promise<boolean>;

    votingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    votingStartedTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Buy(address,uint256,uint256)"(
      account?: string | null,
      tokenAmount?: null,
      amount?: null
    ): BuyEventFilter;
    Buy(
      account?: string | null,
      tokenAmount?: null,
      amount?: null
    ): BuyEventFilter;

    "LiquidityChanged(address,uint256,uint256)"(
      account?: string | null,
      tokenAmount?: null,
      amount?: null
    ): LiquidityChangedEventFilter;
    LiquidityChanged(
      account?: string | null,
      tokenAmount?: null,
      amount?: null
    ): LiquidityChangedEventFilter;

    "Sell(address,uint256,uint256)"(
      account?: string | null,
      amount?: null,
      tokenAmount?: null
    ): SellEventFilter;
    Sell(
      account?: string | null,
      amount?: null,
      tokenAmount?: null
    ): SellEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "Vote(address,bool,uint256)"(
      account?: string | null,
      decision?: null,
      power?: null
    ): VoteEventFilter;
    Vote(
      account?: string | null,
      decision?: null,
      power?: null
    ): VoteEventFilter;

    "VotingEnd(address,uint256,uint256,uint256,uint256)"(
      account?: string | null,
      previousPrice?: null,
      price?: null,
      acceptPower?: null,
      declinePower?: null
    ): VotingEndEventFilter;
    VotingEnd(
      account?: string | null,
      previousPrice?: null,
      price?: null,
      acceptPower?: null,
      declinePower?: null
    ): VotingEndEventFilter;

    "VotingStart(address,uint256,uint64,uint256)"(
      account?: string | null,
      suggestedPrice?: null,
      duration?: null,
      votingNumber?: null
    ): VotingStartEventFilter;
    VotingStart(
      account?: string | null,
      suggestedPrice?: null,
      duration?: null,
      votingNumber?: null
    ): VotingStartEventFilter;
  };

  estimateGas: {
    acceptPower(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    capitalShareRate(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    divider(overrides?: CallOverrides): Promise<BigNumber>;

    endVoting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isWhale(whale: string, overrides?: CallOverrides): Promise<BigNumber>;

    lastVotingNumber(overrides?: CallOverrides): Promise<BigNumber>;

    liquidity(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    rejectPower(overrides?: CallOverrides): Promise<BigNumber>;

    release(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sell(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startVoting(
      suggestedPrice_: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    suggestedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      decision: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votingDuration(overrides?: CallOverrides): Promise<BigNumber>;

    votingStartedTime(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptPower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      tokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    capitalShareRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    divider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endVoting(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isWhale(
      whale: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastVotingNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rejectPower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    release(
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sell(
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startVoting(
      suggestedPrice_: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    suggestedPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      decision: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votingDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    votingStartedTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
